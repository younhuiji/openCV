<<여러 마리의 반려견이 있는 상태에서 원하는 반려견을 찾는 것은 컴퓨터 비전 및 머신 러닝 기술을 활용하여 가능>>

1. 템플릿 매칭:
OpenCV의 matchTemplate 메서드를 사용하여 원하는 반려견의 사진(템플릿)과 다른 사진들을 비교할 수 있다.
그러나 템플릿 매칭은 강아지의 포즈, 조명, 스케일 등이 크게 바뀌면 정확도가 떨어질 수 있다

2. 특징점 매칭:
SIFT, SURF, ORB 등의 알고리즘을 사용하여 각 이미지에서 특징점을 추출하고, 매칭을 통해 원하는 반려견을 찾을 수 있다.
 다양한 각도와 스케일에서도 상대적으로 잘 작동한다.
        <참고 자료> : https://en.wikipedia.org/wiki/Gaussian_function

    - SIFT(Scale-Invariant Feature Transform) :
    이미지에서 특정지점을 찾는다.(가우시안 블러링_이웃한 특징점과 스케일 차이를 구한다.)
    -> 키포인트 적용(사이즈, 앵글) (특정 지점중에 최소값, 최대값을 찾는다)
    -> 방향 지정(주변 픽셀에 그라디언트를 지정한다.)
    -> 이미지에 적용(KeyPoint Descripter 생성 -> KeyPoint Matching)

SURF -> 필터링
    필터링 : 픽셀값을 조작해서 이미지 개선 _ 커널 또는 마스크라는 작은 행렬을 만들어서 이미지에 적용한다.
           노이즈 제거, 경계선 감지, 이미지 명암 조정

    종류 : 저주파필터 : 이미지 부드럽게(가우시안 블러, 평균 필터),
          고주파필터 : 저 저파수를 제거해서 경계선을 뚜렷하게(소벨, 라플라시안),

          밴드 패스 : 특정 주파수 범위의 성분만을 통과시키고 나머지는 차단,
          모폴로지 필터 : 형태학적 특정을 만들어서 특징을 강조하거나 단순화시키는 필터
          메디안필터(Median) : 노이즈제거
           * 추가 컨볼루션(Convolution), 상관연산등을 사용한다.


3. 머신 러닝 / 딥 러닝:
컨볼루션 신경망(CNN)과 같은 딥 러닝 알고리즘을 훈련시켜 특정 반려견을 인식할 수 있다.
정확하며 다양한 상황에서도 잘 작동할 수 있다.
하지만 많은 양의 레이블이 달린 데이터가 필요하며, 훈련에도 상당한 시간과 리소스가 필요하다.

4. 색상, 형태 등 간단한 특성:
단순히 색상 히스토그램이나 윤곽선, 형태 등을 사용해서 간단하게 분류할 수있 다.
복잡하지 않으며 빠르게 결과를 얻을 수 있지만, 정확도는 상대적으로 낮을 수 있다.
======================================================================

b_hist.py,  b_calcHist.py
cv2.calcHist -> 히스토그램 데이터 : 이미지에서 특정 색상/밝기 레벨의 빈도를 알고 싶을 때, 이미지의 밝기 분포를 분석하고 싶을 때 등.
                  ex)이미지에서 어떤 색이 얼마나 있는지 분석할 때
cv2.equalizeHist -> 회색 이미지 :이미지의 대비를 향상시키고 싶을 때, 특히 밝기의 분포가 불균형한 이미지에서 유용
                  ex)  이미지의 대비를 향상
*cv2.calcHist를 사용하여 이미지의 히스토그램을 분석한 뒤, 그 정보를 사용하여 cv2.equalizeHist로 이미지를 개선한다.

======================================================================

